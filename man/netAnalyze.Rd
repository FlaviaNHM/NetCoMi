% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netAnalyze.R
\name{netAnalyze}
\alias{netAnalyze}
\title{Microbiome Network Analysis}
\usage{
netAnalyze(
  net,
  sPathAlgo = "dijkstra",
  sPathNorm = TRUE,
  sPathDisconnected = "maxPath",
  connectivity = TRUE,
  clustMethod = NULL,
  clustPar = NULL,
  clustPar2 = NULL,
  hubPar = "eigenvector",
  hubQuant = 0.95,
  lnormFit = FALSE,
  weightDeg = FALSE,
  normDeg = TRUE,
  normBetw = TRUE,
  normClose = TRUE,
  normEigen = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{net}{object of class \code{microNet} inheriting from a call to
\code{\link{netConstruct}}}

\item{sPathAlgo}{character indicating the algorithm used for computing
the shortest paths between all node pairs. \code{\link[igraph]{distances}} 
is used for shortest path calculation. Possible values are: "unweighted", 
"dijkstra" (default), "bellman-ford", "johnson", or "automatic" (the 
fastest suitable algorithm is used). The shortest paths are needed for the 
average (shortest) path length and closeness centrality.}

\item{sPathNorm}{logical. If \code{TRUE} (default), shortest paths are 
normalized by average dissimilarity (only connected nodes are considered). 
That means, a path is interpreted as steps with average dissimilarity. 
If \code{FALSE}, the shortest path is the minimum sum of dissimilarities 
between two nodes.}

\item{sPathDisconnected}{character indicating how to handle disconnected 
components. A component (single node or subnetwork) is disconnected if 
there is no path between the component and all other nodes in the network.
Possible options are:
\describe{
\item{\code{"infinity"}}{Shortest paths between unconnected nodes are set
to infinity and thus ignored in average shortest path and closeness 
centrality calculation. As a consequence, a highly connected network may 
have a higher average path length than a less connected network.}
\item{\code{"maxPath"}}{Default. The shortest path length (unnormalized) 
between unconnected components is set to the number of nodes (N) and 
thus longer than the maximum possible path length. In unweighted
networks, the maximum path length is N-1, and in weighted networks (N-1)*1, 
since the highest possible dissimilarity is one.}
}}

\item{connectivity}{logical indicating whether edge and vertex connectivity 
should be calculated. Might be disabled to reduce execution time.}

\item{clustMethod}{character indicating the clustering algorithm. Possible
values are "hierarchical" for a hierarchical algorithm based on
dissimilarity values, or the clustering methods provided by the igraph
package (see \code{\link[igraph]{communities}} for possible methods).
Defaults to \code{"cluster_fast_greedy"}.}

\item{clustPar}{list with parameters passed to the clustering functions.
If hierarchical clustering is used, the parameters are passed to
\code{\link[stats]{hclust}} as well as \code{\link[stats]{cutree}}.}

\item{clustPar2}{optional list with clustering parameters for the second
network. If \code{NULL} and \code{net} contains two networks,
\code{clustPar} is used for the second network as well.}

\item{hubPar}{character vector with one or more elements (centrality 
measures) used for identifying hub nodes. Possible values are \code{degree},
\code{betweenness}, \code{closeness}, and \code{eigenvector}. If multiple
measures are given, hubs are nodes with highest centrality for all selected
measures. See details.}

\item{hubQuant}{quantile used for determining hub nodes. Defaults to 0.95.}

\item{lnormFit}{hubs are nodes with a centrality value above the 95\%
quantile of the fitted log-normal distribution (if \code{lnormFit = TRUE})
or of the empirical distribution of centrality values (if
\code{lnormFit = FALSE}, which is default).}

\item{weightDeg}{if \code{TRUE}, the weighted degree is used (see
\code{\link[igraph]{strength}}). Is automatically set to TRUE for a fully
connected network.}

\item{normDeg, normBetw, normClose, normEigen}{if \code{TRUE}, a normalized
version of the respective centrality values is returned. By default, all
centralities are normalized.}

\item{verbose}{logical. If \code{TRUE} (default), status messages are shown.}
}
\value{
An object of class \code{microNetProps} containing the following
  elements for both groups, respectively: \tabular{ll}{
  \code{clustering}\tab determined clusters\cr
  \code{centralities}\tab determined degree, betweenness, closeness, and
  eigenvector centrality values\cr
  \code{hubs}\tab names of the hub nodes (taxa or subjects)\cr
  \code{globalProps}\tab values for global network properties: average path
  length, global clustering coefficient, modularity, vertex connectivity,
  edge connectivity, density (ratio of the number of edges and the number of
  possible edges)\cr
  \code{paramsProperties}\tab Given parameters used for computing network
  properties \cr
  \code{input}\tab input adopted from \code{net} \cr
  \code{paramsNetConstruct }\tab parameters used for network construction by
  \code{netConstruct}\cr
  \code{isempty}\tab indicates if the networks are empty (do not contain any
  edges)\cr}
}
\description{
Determine network properties for objects of class
  \code{microNet}.
}
\details{
\strong{Identification of hub nodes:}\cr\cr
  Hubs are the nodes with highest centrality values for one or more
  centrality measure.\cr\cr The "highest values" regarding a centrality
  measure are defined as values lying above a certain quantile (defined by
  \code{hubQuant}) either of the empirical distribution of the centralities
  or of the fitted log-normal distribution (using
  \code{\link[MASS]{fitdistr}}).\cr\cr If \code{clustPar} contains multiple
  measures, the centrality values of a hub node must be above the given
  quantile for all these measures.
}
\examples{
# load data sets from American Gut Project (from SpiecEasi package)
data("amgut1.filt")

# network construction:
amgut_net1 <- netConstruct(amgut1.filt, measure = "pearson",
                           filtTax = "highestVar",
                           filtTaxPar = list(highestVar = 50),
                           zeroMethod = "pseudo", normMethod = "clr")

# network analysis:
amgut_props1 <- netAnalyze(amgut_net1, clustMethod = "cluster_fast_greedy",
                           hubPar = "eigenvector")
amgut_props2 <- netAnalyze(amgut_net1, clustMethod = "cluster_fast_greedy",
                           hubPar = c("degree", "betweenness", "closeness"))

summary(amgut_props1, showCentr = "eigenvector", numbNodes = 15L, digits = 3L)
summary(amgut_props2)

# network plot:
plot(amgut_props1)
plot(amgut_props2)


# dissimilarity-based network (where nodes are subjects):
amgut_net3 <- netConstruct(amgut1.filt, measure = "aitchison",
                           filtSamp = "highestFreq",
                           filtSampPar = list(highestFreq = 30),
                           zeroMethod = "multRepl", sparsMethod = "knn")

amgut_props3 <- netAnalyze(amgut_net3, clustMethod = "hierarchical",
                           clustPar = list(k = 3))

plot(amgut_props3)

}
\seealso{
\code{\link{netConstruct}} for network construction,
  \code{\link{netCompare}} for network comparison,
  \code{\link{diffnet}} for constructing differential networks.
}
